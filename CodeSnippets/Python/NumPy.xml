<?xml version="1.0"?>
<block name="Python" syntax="python" tags="python">
  <description>http://python.org/</description>
  <block name="NumPy" tags="numpy">
    <description>http://www.numpy.org/</description>
    <prerequisites><![CDATA[from numpy import *]]></prerequisites>
    <block name="Array" tags="array ndarray vector">
      <code tags="create row"><![CDATA[data = array([0.1, 0.2, 0.3])
data

# array([0.1, 0.2, 0.3])]]></code>
      <code tags="create col column"><![CDATA[data = array([[0.1], [0.2], [0.3]])
data

# array([[ 0.1],
#        [ 0.2],
#        [ 0.3]])]]></code>
      <code tags="create 2d matrix multidimensional"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data

# array([[ 0.1,  0.2,  0.3],
#        [ 0.4,  0.5,  0.6]])]]></code>
      <code tags="add addition scalar constant"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data + 1

# array([[ 1.1,  1.2,  1.3],
#        [ 1.4,  1.5,  1.6]])]]></code>
      <code tags="add addition"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data + data

# array([[ 0.2,  0.4,  0.6],
#        [ 0.8,  1. ,  1.2]])]]></code>
      <code tags="add addition broadcasting row"><![CDATA[data1 = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data2 = array([1., 2., 3.])
data1 + data2

# array([[ 1.1,  2.2,  3.3],
#        [ 1.4,  2.5,  3.6]])]]></code>
      <code tags="add addition broadcasting col column"><![CDATA[data1 = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data2 = array([[1.], [2.]])
data1 + data2

# array([[ 1.1,  1.2,  1.3],
#        [ 2.4,  2.5,  2.6]])]]></code>
      <code tags="ndim number dimensions"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data.ndim

# 2]]></code>
      <code tags="shape dimensions size"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data.shape

# (2L, 3L)]]></code>
      <code tags="dtype type int int32"><![CDATA[data = array([1, 2, 3])
data.dtype

# dtype('int32')]]></code>
      <code tags="dtype type int int64"><![CDATA[data = array([[1, 2, 3], [4, 5, 6]], dtype=int64)
data.dtype

# dtype('int64')]]></code>
      <code tags="dtype type float float64"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
data.dtype

# dtype('float64')]]></code>
      <code tags="dtype type float float64"><![CDATA[data = array([1, 2, 3], dtype=float64)
data.dtype

# dtype('float64')]]></code>
      <code tags="dtype type int integer signed"><![CDATA[# Type
data = array([1, 2, 3], dtype=int8)   # Signed 8-bit (1 byte) integer type
data = array([1, 2, 3], dtype=int16)  # Signed 16-bit integer type
data = array([1, 2, 3], dtype=int32)  # Signed 32-bit integer type
data = array([1, 2, 3], dtype=int64)  # Signed 64-bit integer type

# Type Code
data = array([1, 2, 3], dtype='i1')   # Signed 8-bit (1 byte) integer type
data = array([1, 2, 3], dtype='i2')   # Signed 16-bit integer type
data = array([1, 2, 3], dtype='i4')   # Signed 32-bit integer type
data = array([1, 2, 3], dtype='i8')   # Signed 64-bit integer type]]></code>
      <code tags="dtype type uint integer unsigned"><![CDATA[# Type
data = array([1, 2, 3], dtype=uint8)  # Unsigned 8-bit (1 byte) integer type
data = array([1, 2, 3], dtype=uint16) # Unsigned 16-bit integer type
data = array([1, 2, 3], dtype=uint32) # Unsigned 32-bit integer type
data = array([1, 2, 3], dtype=uint64) # Unsigned 64-bit integer type

# Type Code
data = array([1, 2, 3], dtype='u1')   # Unsigned 8-bit (1 byte) integer type
data = array([1, 2, 3], dtype='u2')   # Unsigned 16-bit integer type
data = array([1, 2, 3], dtype='u4')   # Unsigned 32-bit integer type
data = array([1, 2, 3], dtype='u8')   # Unsigned 64-bit integer type]]></code>
      <code tags="dtype type float double precision"><![CDATA[# Type
data = array([1, 2, 3], dtype=float16)  # Half-precision floating point
data = array([1, 2, 3], dtype=float32)  # Standard single-precision floating point. Compatible with C float
data = array([1, 2, 3], dtype=float64)  # Standard double-precision floating point. Compatible with C double and Python float object
data = array([1, 2, 3], dtype=float128) # Extended-precision floating point

# Type Code
data = array([1, 2, 3], dtype='f2')  # Half-precision floating point
data = array([1, 2, 3], dtype='f4')  # Standard single-precision floating point. Compatible with C float
data = array([1, 2, 3], dtype='f')   # Standard single-precision floating point. Compatible with C float
data = array([1, 2, 3], dtype='f8')  # Standard double-precision floating point. Compatible with C double and Python float object
data = array([1, 2, 3], dtype='d')   # Standard double-precision floating point. Compatible with C double and Python float object
data = array([1, 2, 3], dtype='f16') # Extended-precision floating point
data = array([1, 2, 3], dtype='g')   # Extended-precision floating point]]></code>
      <code tags="dtype type complex"><![CDATA[# Type
data = array([1, 2, 3], dtype=complex64)  # Standard single-precision complex number
data = array([1, 2, 3], dtype=complex128) # Standard double-precision complex number
data = array([1, 2, 3], dtype=complex256) # Extended-precision complex number

# Type Code
data = array([1, 2, 3], dtype='c8')       # Standard single-precision complex number
data = array([1, 2, 3], dtype='c16')      # Standard double-precision complex number
data = array([1, 2, 3], dtype='c32')      # Extended-precision complex number]]></code>
      <code tags="dtype type bool boolean true false"><![CDATA[data = array([True, True, False], dtype=bool) # Boolean type storing True and False values
data = array([True, True, False], dtype='?')  # Boolean type storing True and False values]]></code>
      <code tags="dtype type object"><![CDATA[data = array(['Hello', 1, 0.5], dtype=object) # Python object type
data = array(['Hello', 1, 0.5], dtype='O')    # Python object type]]></code>
      <code tags="dtype type string"><![CDATA[data = array(['Hello', 'NumPy'], dtype=string_) # Fixed-length string type (1 byte per character)
data = array(['Hello', 'NumPy'], dtype='S5')    # To create a string dtype with length 10, use 'S10']]></code>
      <code tags="dtype type unicode string"><![CDATA[data = array(['Hello', 'NumPy'], dtype=unicode_) # Fixed-length unicode type (number of bytes platform specific)
data = array(['Hello', 'NumPy'], dtype='U5')     # To create a unicode string dtype with length 10, use 'U10']]></code>
      <code tags="arange range sequence"><![CDATA[arange(10)

# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])]]></code>
      <code tags="zeros"><![CDATA[zeros(10)

# array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])]]></code>
      <code tags="zeros 2d matrix multidimensional"><![CDATA[zeros((2,4))

# array([[ 0.,  0.,  0.,  0.],
#        [ 0.,  0.,  0.,  0.]])]]></code>
      <code tags="zeros like"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
zeros_like(data)

# array([[ 0.,  0.,  0.],
#        [ 0.,  0.,  0.]])]]></code>
      <code tags="ones"><![CDATA[ones(10)

# array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])]]></code>
      <code tags="ones 2d matrix multidimensional"><![CDATA[ones((2,4))

# array([[ 1.,  1.,  1.,  1.],
#        [ 1.,  1.,  1.,  1.]])]]></code>
      <code tags="ones like"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
ones_like(data)

# array([[ 1.,  1.,  1.],
#        [ 1.,  1.,  1.]])]]></code>
      <code tags="empty"><![CDATA[empty(3)

# array([  2.21650179e-301,   1.24182589e-307,   3.66286673e-316])]]></code>
      <code tags="empty 2d matrix multidimensional"><![CDATA[empty((3,2))

# array([[  1.52183474e-316,   1.52478856e-316],
#        [  2.50008035e-315,   7.02096887e-316],
#        [  8.14120165e-315,   1.52483362e-316]])]]></code>
      <code tags="empty like"><![CDATA[data = array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
empty_like(data)

# array([[  1.78851764e-321,   6.39175467e-314,   2.57675195e-316],
#        [  2.96439388e-323,   1.91237288e-313,   4.94065646e-323]])]]></code>
      <code tags="eye identity matrix"><![CDATA[eye(4)

# array([[ 1.,  0.,  0.,  0.],
#        [ 0.,  1.,  0.,  0.],
#        [ 0.,  0.,  1.,  0.],
#        [ 0.,  0.,  0.,  1.]])]]></code>
      <code tags="eye identity matrix"><![CDATA[identity(4)

# array([[ 1.,  0.,  0.,  0.],
#        [ 0.,  1.,  0.,  0.],
#        [ 0.,  0.,  1.,  0.],
#        [ 0.,  0.,  0.,  1.]])]]></code>
      <code tags="eye identity rectangle matrix"><![CDATA[eye(2,4)

# array([[ 1.,  0.,  0.,  0.],
#        [ 0.,  1.,  0.,  0.]])]]></code>
      <code tags="eye identity rectangle matrix"><![CDATA[identity(2,4)

# array([[ 1.,  0.,  0.,  0.],
#        [ 0.,  1.,  0.,  0.]])]]></code>
      <code tags="astype convert int float"><![CDATA[# Note: Calling astype always creates a new array (a copy of the data).

data = array([1, 2, 3, 4, 5])
data.dtype

# dtype('int32')

float_data = data.astype(float64)
float_data.dtype

# dtype('float64')]]></code>
      <code tags="astype convert int float"><![CDATA[# Note: Calling astype always creates a new array (a copy of the data).

data = array([1.6, -2.5, 3.2, 0.1])
data.dtype

# dtype('float64')

int_data = data.astype(int32)
int_data

# array([ 1, -2,  3,  0])]]></code>
      <code tags="astype convert string float"><![CDATA[# Note: Calling astype always creates a new array (a copy of the data).

data = array(['1.6', '-2.5', '3.2', '0.1'])
data.dtype

# dtype('S4')

float_data = data.astype(float64)
float_data

# array([ 1.6, -2.5,  3.2,  0.1])]]></code>
    </block>
  </block>
</block>